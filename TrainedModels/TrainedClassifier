import numpy as np
import pandas as pd
from scipy import stats
import sys
from sklearn.externals import joblib
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.svm import SVC


def getGenesNameDictionary(pdTestData):
    pdSNODataDictionary=dict(pdTestData['SNO'])
    resultDic={}

    for k,v in pdSNODataDictionary.items():
        resultDic[v]=k
    return resultDic
def getIndicesOfGenes(filteredGeneNames,fullGeneFile):
    geneIndices=[]
    for filter in range(len(filteredGeneNames)):
        for  gene in range(len(fullGeneFile)):
            if filteredGeneNames[filter] ==fullGeneFile[gene]:
                geneIndices.append(gene)
    return geneIndices
labelEncoder=LabelEncoder()

print("Please enter file path using a space(only .csv file allowed) and type ENTER:")
print("Example  E:\TestData.csv")


trainModelPath="TrainedModels\ClusterFeatureModel.pkl"
print("Loading Trained model........")
trainedKmeansModel=joblib.load(trainModelPath)
print("Loaded Successfully! ...... trainedKmeansModel")
trainedGeneNames=[
"D14043_at",
"D14662_at",
"D26350_at",
"D42041_at",
"D45248_at",
"D87258_at",
"X05908_at",
"X59065_at",
"J04543_at",
"L25081_at",
"L36818_at",
"L48513_at",
"M29927_at",
"M69066_at",
"M76378_at",
"M84349_at",
"U24266_at",
"U44772_at",


 ]

#testfileName = input()
pdTestFileData=pd.read_csv("E:\BioInformatics\pp5i_test.gr.csv")
pdTrainFileData=pd.read_csv("E:\BioInformatics\pp5i_train.gr.csv")
pdTrainClassData=pd.read_csv("E:\BioInformatics\pp5i_train_class.txt",header=None,sep=" ")

geneIndices=getIndicesOfGenes(trainedGeneNames,pdTrainFileData['SNO'])

labelEncoder.fit(np.asarray(pdTrainClassData[0]))
trainClassNumericalValues=labelEncoder.transform(pdTrainClassData[0])
pdTrainFileDataWithoutSNO = pdTrainFileData.drop(['SNO'],axis=1)
pdTrainFileDataOrderByGenes=pdTrainFileDataWithoutSNO.transpose()
#pdTestFileStandardized=stats.zscore(pdTestFileData)
X,y=np.asarray(pdTrainFileDataOrderByGenes),trainClassNumericalValues
#input("Please ENTER to quit...")
pdTrainDataNormalized=stats.zscore(pdTrainFileDataOrderByGenes)
X_filtered=pdTrainDataNormalized[:,geneIndices]

svmClassifier=SVC()

kFoldShuffle= KFold(n_splits=10,shuffle=True)
accuracy=[]
for train_index,test_index in kFoldShuffle.split(X_filtered,y):
    X_train,X_test=X[train_index],X[test_index]
    y_train,y_test=y[train_index],y[test_index]
    svmClassifier.fit(X_train,y_train)
    accuracy.append(svmClassifier.score(X_test,y_test))
print(np.mean(accuracy))

TestData=np.asarray(pdTestDataNormalized)
TestDataTransformed=pdTestDataNormalized[:,geneIndices]
svmClassifier.predict(TestDataTransformed[:,geneIndices])
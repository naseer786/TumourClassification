import numpy as np
import pandas as pd
from scipy import stats
import sys
from sklearn.externals import joblib
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.svm import SVC


def getGenesNameDictionary(pdTestData):
    pdSNODataDictionary=dict(pdTestData['SNO'])
    resultDic={}

    for k,v in pdSNODataDictionary.items():
        resultDic[v]=k
    return resultDic

def getIndicesOfGenes(filteredGeneNames,fullGeneFile):
    geneIndices=[]
    for filter in range(len(filteredGeneNames)):
        for  gene in range(len(fullGeneFile)):
            if filteredGeneNames[filter] ==fullGeneFile[gene]:
                geneIndices.append(gene)
    return geneIndices


def getFreqDistAndTopNValues(pdDataList,n):
    freqDist={}
    genesSelected=[]
    for gene in pdDataList:
       if gene in freqDist:
           freqDist[gene]+=1
       else:
           freqDist[gene]=0
    freqDist = sorted(freqDist.items(), key=lambda x: x[1],reverse=True)
    for k,v in freqDist[:n]:
        genesSelected.append(k)
    return freqDist,genesSelected


#Label encoder to properly predict the class in text format
le=LabelEncoder()
pdTrainesClassName="pp5i_train_class.txt"
pdTrainFileClassValues=pd.read_csv(pdTrainesClassName,header=None,sep=" ")
le.fit(pdTrainFileClassValues)

pdFullGene=pd.read_csv("TrainedModels\FullGeneList\FullGenes.txt",sep=" ",header=None)
fd,topGenes=getFreqDistAndTopNValues(list(pdFullGene[0]),25)



print("Please read README.txt file for the details of test data format")
print("Please Enter the Testing Data into the TestData Folder and name it to pp5i_test.gr    file should be in csv format")


#Loading Trained Model
trainModelPath="TrainedModels\Model\svm-rce.pkl"
print("Loading Trained model........")
trainedKmeansModel=joblib.load(trainModelPath)
print("Loaded Successfully! ...... trainedKmeansModel")




#Loading Testing Data
pdTestDataName="TestData\pp5i_test.gr.csv"
pdTestFileData=pd.read_csv(pdTestDataName)
pdTestDataWithoutSNO = pdTestFileData.drop(['SNO'],axis=1)
pdTestDataNormalized=stats.zscore(pdTestDataWithoutSNO)

#Get Indices of the Genes
geneIndices=getIndicesOfGenes(topGenes,pdTestFileData['SNO'])



#convert to numpy Array
X_test=np.asarray(pdTestDataNormalized.transpose())


X_test_selected=X_test[:,geneIndices]







print(le.inverse_transform(trainedKmeansModel.predict(X_test_selected)))













